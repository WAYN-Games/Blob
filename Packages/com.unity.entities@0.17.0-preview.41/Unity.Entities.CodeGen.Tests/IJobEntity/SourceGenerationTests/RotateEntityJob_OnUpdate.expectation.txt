using System.Runtime.CompilerServices;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;

[CompilerGenerated]
public struct RotateEntityJob_OnUpdate : IJobEntityBatch
{
	public RotateEntityJob __JobData;

	public ComponentTypeHandle<Rotation> __RotationType;

	[ReadOnly]
	public ComponentTypeHandle<RotationSpeed_ForEach> __RotationSpeed_ForEachType;

	public unsafe void Execute(ArchetypeChunk batch, int batchIndex)
	{
		Rotation* unsafePtr = (Rotation*)batch.GetNativeArray(__RotationType).GetUnsafePtr();
		RotationSpeed_ForEach* unsafeReadOnlyPtr = (RotationSpeed_ForEach*)batch.GetNativeArray(__RotationSpeed_ForEachType).GetUnsafeReadOnlyPtr();
		for (int i = 0; i < batch.Count; i++)
		{
			__JobData.OnUpdate(ref unsafePtr[i], in unsafeReadOnlyPtr[i]);
		}
	}
}
