
//------------------------------------------------------------------------------
// <auto-generated>
//     This file was automatically generated by Unity.Entities.Editor.BurstInteropCodeGenerator
//     Any changes you make here will be overwritten
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     To update this file, use the "DOTS -> Regenerate Burst Interop" menu option.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Unity.Burst;
using Unity.Collections;
using System.Runtime.InteropServices;

namespace Unity.Entities
{
    public unsafe partial struct EntityCommandBuffer
    {

#if !UNITY_IOS

        [BurstDiscard]
        private static void CheckDelegate(ref bool useDelegate)
        {
            //@TODO: This should use BurstCompiler.IsEnabled once that is available as an efficient API.
            useDelegate = true;
        }

        private static bool UseDelegate()
        {
            bool result = false;
            CheckDelegate(ref result);
            return result;
        }

        static class Managed
        {
            public static bool _initialized = false;

            public delegate void _dlg_PlaybackChainChunk(IntPtr mgr, IntPtr managedReferenceIndexRemovalCount, ref EntityComponentStore.ArchetypeChanges archetypeChanges, ref ECBSharedPlaybackState playbackState, IntPtr chainStates, int currentChain, int nextChain, bool isFirstPlayback, PlaybackPolicy playbackPolicy);
            public static _dlg_PlaybackChainChunk _bfp_PlaybackChainChunk;
        }


#endif

        [NotBurstCompatible]
        internal static void Initialize()
        {
#if !UNITY_IOS
            if (Managed._initialized)
                return;
            Managed._initialized = true;
            Managed._bfp_PlaybackChainChunk = BurstCompiler.CompileFunctionPointer<Managed._dlg_PlaybackChainChunk>(_mono_to_burst_PlaybackChainChunk).Invoke;

#endif
        }

        private  static void PlaybackChainChunk (EntityDataAccess* mgr, Unity.Collections.LowLevel.Unsafe.UnsafeList* managedReferenceIndexRemovalCount, ref EntityComponentStore.ArchetypeChanges archetypeChanges, ref ECBSharedPlaybackState playbackState, ECBChainPlaybackState* chainStates, int currentChain, int nextChain, bool isFirstPlayback, PlaybackPolicy playbackPolicy)
        {
#if !UNITY_IOS
            if (UseDelegate())
            {
                _forward_mono_PlaybackChainChunk(mgr, managedReferenceIndexRemovalCount, ref archetypeChanges, ref playbackState, chainStates, currentChain, nextChain, isFirstPlayback, playbackPolicy);
                return;
            }
#endif

            _PlaybackChainChunk(mgr, managedReferenceIndexRemovalCount, ref archetypeChanges, ref playbackState, chainStates, currentChain, nextChain, isFirstPlayback, playbackPolicy);
        }

#if !UNITY_IOS
        [BurstCompile]
        [MonoPInvokeCallback(typeof(Managed._dlg_PlaybackChainChunk))]
        private static void _mono_to_burst_PlaybackChainChunk(IntPtr mgr, IntPtr managedReferenceIndexRemovalCount, ref EntityComponentStore.ArchetypeChanges archetypeChanges, ref ECBSharedPlaybackState playbackState, IntPtr chainStates, int currentChain, int nextChain, bool isFirstPlayback, PlaybackPolicy playbackPolicy)
        {
            _PlaybackChainChunk((EntityDataAccess*)mgr, (Unity.Collections.LowLevel.Unsafe.UnsafeList*)managedReferenceIndexRemovalCount, ref archetypeChanges, ref playbackState, (ECBChainPlaybackState*)chainStates, currentChain, nextChain, isFirstPlayback, playbackPolicy);
        }

        [BurstDiscard]
        private static void _forward_mono_PlaybackChainChunk(EntityDataAccess* mgr, Unity.Collections.LowLevel.Unsafe.UnsafeList* managedReferenceIndexRemovalCount, ref EntityComponentStore.ArchetypeChanges archetypeChanges, ref ECBSharedPlaybackState playbackState, ECBChainPlaybackState* chainStates, int currentChain, int nextChain, bool isFirstPlayback, PlaybackPolicy playbackPolicy)
        {
            Managed._bfp_PlaybackChainChunk((IntPtr) mgr, (IntPtr) managedReferenceIndexRemovalCount, ref archetypeChanges, ref playbackState, (IntPtr) chainStates, currentChain, nextChain, isFirstPlayback, playbackPolicy);
        }
#endif




    }
}
