
//------------------------------------------------------------------------------
// <auto-generated>
//     This file was automatically generated by Unity.Entities.Editor.BurstInteropCodeGenerator
//     Any changes you make here will be overwritten
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     To update this file, use the "DOTS -> Regenerate Burst Interop" menu option.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Unity.Burst;
using Unity.Collections;
using System.Runtime.InteropServices;

namespace Unity.Entities
{
     unsafe partial struct EntityComponentStore
    {

#if !UNITY_IOS

        [BurstDiscard]
        private static void CheckDelegate(ref bool useDelegate)
        {
            //@TODO: This should use BurstCompiler.IsEnabled once that is available as an efficient API.
            useDelegate = true;
        }

        private static bool UseDelegate()
        {
            bool result = false;
            CheckDelegate(ref result);
            return result;
        }

        static class Managed
        {
            public static bool _initialized = false;

            public delegate void _dlg_EntityBatchFromEntityChunkDataShared(in EntityInChunk* chunkData, int chunkCount, IntPtr entityBatchList, IntPtr currentbatchIndex, int nSharedComponentsToAdd, IntPtr foundError);
            public static _dlg_EntityBatchFromEntityChunkDataShared _bfp_EntityBatchFromEntityChunkDataShared;
            public delegate void _dlg_SortEntityInChunk(IntPtr entityInChunks, int count);
            public static _dlg_SortEntityInChunk _bfp_SortEntityInChunk;
            public delegate void _dlg_GatherEntityInChunkForEntities(IntPtr Entities, IntPtr globalEntityInChunk, IntPtr EntityChunkData, int numEntities);
            public static _dlg_GatherEntityInChunkForEntities _bfp_GatherEntityInChunkForEntities;
        }


#endif

        [NotBurstCompatible]
        internal static void Initialize()
        {
#if !UNITY_IOS
            if (Managed._initialized)
                return;
            Managed._initialized = true;
            Managed._bfp_EntityBatchFromEntityChunkDataShared = BurstCompiler.CompileFunctionPointer<Managed._dlg_EntityBatchFromEntityChunkDataShared>(_mono_to_burst_EntityBatchFromEntityChunkDataShared).Invoke;
            Managed._bfp_SortEntityInChunk = BurstCompiler.CompileFunctionPointer<Managed._dlg_SortEntityInChunk>(_mono_to_burst_SortEntityInChunk).Invoke;
            Managed._bfp_GatherEntityInChunkForEntities = BurstCompiler.CompileFunctionPointer<Managed._dlg_GatherEntityInChunkForEntities>(_mono_to_burst_GatherEntityInChunkForEntities).Invoke;

#endif
        }

        private  static void EntityBatchFromEntityChunkDataShared (in EntityInChunk* chunkData, int chunkCount, EntityBatchInChunk* entityBatchList, int* currentbatchIndex, int nSharedComponentsToAdd, int* foundError)
        {
#if !UNITY_IOS
            if (UseDelegate())
            {
                _forward_mono_EntityBatchFromEntityChunkDataShared(in chunkData, chunkCount, entityBatchList, currentbatchIndex, nSharedComponentsToAdd, foundError);
                return;
            }
#endif

            _EntityBatchFromEntityChunkDataShared(in chunkData, chunkCount, entityBatchList, currentbatchIndex, nSharedComponentsToAdd, foundError);
        }

#if !UNITY_IOS
        [BurstCompile]
        [MonoPInvokeCallback(typeof(Managed._dlg_EntityBatchFromEntityChunkDataShared))]
        private static void _mono_to_burst_EntityBatchFromEntityChunkDataShared(in EntityInChunk* chunkData, int chunkCount, IntPtr entityBatchList, IntPtr currentbatchIndex, int nSharedComponentsToAdd, IntPtr foundError)
        {
            _EntityBatchFromEntityChunkDataShared(in chunkData, chunkCount, (EntityBatchInChunk*)entityBatchList, (int*)currentbatchIndex, nSharedComponentsToAdd, (int*)foundError);
        }

        [BurstDiscard]
        private static void _forward_mono_EntityBatchFromEntityChunkDataShared(in EntityInChunk* chunkData, int chunkCount, EntityBatchInChunk* entityBatchList, int* currentbatchIndex, int nSharedComponentsToAdd, int* foundError)
        {
            Managed._bfp_EntityBatchFromEntityChunkDataShared(in chunkData, chunkCount, (IntPtr) entityBatchList, (IntPtr) currentbatchIndex, nSharedComponentsToAdd, (IntPtr) foundError);
        }
#endif

        private  static void SortEntityInChunk (EntityInChunk* entityInChunks, int count)
        {
#if !UNITY_IOS
            if (UseDelegate())
            {
                _forward_mono_SortEntityInChunk(entityInChunks, count);
                return;
            }
#endif

            _SortEntityInChunk(entityInChunks, count);
        }

#if !UNITY_IOS
        [BurstCompile]
        [MonoPInvokeCallback(typeof(Managed._dlg_SortEntityInChunk))]
        private static void _mono_to_burst_SortEntityInChunk(IntPtr entityInChunks, int count)
        {
            _SortEntityInChunk((EntityInChunk*)entityInChunks, count);
        }

        [BurstDiscard]
        private static void _forward_mono_SortEntityInChunk(EntityInChunk* entityInChunks, int count)
        {
            Managed._bfp_SortEntityInChunk((IntPtr) entityInChunks, count);
        }
#endif

        private  static void GatherEntityInChunkForEntities (Entity* Entities, EntityInChunk* globalEntityInChunk, EntityInChunk* EntityChunkData, int numEntities)
        {
#if !UNITY_IOS
            if (UseDelegate())
            {
                _forward_mono_GatherEntityInChunkForEntities(Entities, globalEntityInChunk, EntityChunkData, numEntities);
                return;
            }
#endif

            _GatherEntityInChunkForEntities(Entities, globalEntityInChunk, EntityChunkData, numEntities);
        }

#if !UNITY_IOS
        [BurstCompile]
        [MonoPInvokeCallback(typeof(Managed._dlg_GatherEntityInChunkForEntities))]
        private static void _mono_to_burst_GatherEntityInChunkForEntities(IntPtr Entities, IntPtr globalEntityInChunk, IntPtr EntityChunkData, int numEntities)
        {
            _GatherEntityInChunkForEntities((Entity*)Entities, (EntityInChunk*)globalEntityInChunk, (EntityInChunk*)EntityChunkData, numEntities);
        }

        [BurstDiscard]
        private static void _forward_mono_GatherEntityInChunkForEntities(Entity* Entities, EntityInChunk* globalEntityInChunk, EntityInChunk* EntityChunkData, int numEntities)
        {
            Managed._bfp_GatherEntityInChunkForEntities((IntPtr) Entities, (IntPtr) globalEntityInChunk, (IntPtr) EntityChunkData, numEntities);
        }
#endif




    }
}
